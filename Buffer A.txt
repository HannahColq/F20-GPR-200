//Some code based on code provided previously by Daniel Buckstein

//rotate
vec3 rotation(in vec3 cubeLoc)
{
    float x = iTime;
    mat3 matrix = mat3(cos(x), 0.0, -sin(x), 0.0, 1.0, 0.0, sin(x), 0.0, cos(x));
    cubeLoc *= matrix;    
    return cubeLoc;
}

color4 calcColor(in sViewport vp, in sRay ray)
{   
    //Cube Location
    vec3 cubeLoc = rotation(ray.direction.xyz);
    return texture(iChannel0, cubeLoc);
}

void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}