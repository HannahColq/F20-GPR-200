// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    Offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

//Code from class by Daniel Buckstein
struct sSphere
{
    vec4 center;
    float radius;
};

//Code from class by Daniel Buckstein
void initSphere(out sSphere sphere, 
                in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
}

//Code from class by Daniel Buckstein
float lenSq(vec2 x)
{
    return dot(x,x);
}

//Point Light Data Structure
struct pointLight
{
  	vec4 center;
    vec3 color;
    float intensity;
};
    
//Initialize light
void initLight(out pointLight light, in vec3 center, in vec3 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{	
    // SCENE
    //Code from class by Daniel Buckstein
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    
    //Create a light and initialize values
    pointLight light;
    initLight(light, vec3(-2.0, -3.0, -6.0), vec3(1.0, 1.0, 1.0), 10.0);

    //Code from class by Daniel Buckstein
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy), rSq = sphere.radius * sphere.radius;
       
    //Code from class by Daniel Buckstein
    //if (lSq <= sphere.radius)
    if (lSq <= rSq)
    {
        //return vec4(0.0, 1.0, 1.0, 1.0);
        
        // actually dz_sq for now
        //dp.z = sphere.radius * sphere.radius - (dp.x * dp.x + dp.y * dp.y);
        
        //Code from class by Daniel Buckstein
   		 dp.z = rSq - lSq;
    	vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
    	vec3 normal = (position - sphere.center.xyz) / sphere.radius;
    
        
        //Lambertian Reflectance
   		//Values used for diffuse coefficient, attenuation
        //Light normal vector
 	 	vec3 lightNormal = normalize(position - light.center.xyz);
        //Distance from light to surface
  		float lightDist = distance(lightNormal, position);
    	//Diffuse Coefficient
    	float diffuseCoeff = max(0.0, dot(normal, lightNormal));
        //return vec4(diffuseCoeff, diffuseCoeff, diffuseCoeff, 1.0);
    	//Attenuation
    	float attenuation = 1.0 / (1.0 + (lightDist / light.intensity) + ((lightDist * lightDist) / (light.intensity * light.intensity)));
    	//Diffuse Intensity
    	float diffuseIntensity = diffuseCoeff * attenuation;
    
    	//Final Color
    	vec3 color = diffuseIntensity * (normal * 0.5 + 0.5) * light.color;
        //return vec4(color, 1.0);
        
        
        //Phong Reflectance
        //Values used for specular coefficient, 
        //View vector normal
        vec3 viewVec = normalize(rayOrigin.xyz - position);
        //Reflected light vector
        vec3 refLight = reflect(-lightNormal, normal);
        //Specular Coefficient
        float specCoeff = max(0.0, dot(viewVec, refLight));
        //return vec4(specCoeff, specCoeff, specCoeff, 1.0);
        //Highlight Exponent
        float hlExponent = 8.0;
        //Specular Intensity
        float specularIntensity = pow(specCoeff, hlExponent);
       	
        //Final Color
        float globalAmbient = 0.5;
        vec3 globalAmbColor = vec3(0.0, 0.0, 0.25);
        vec3 specColor = vec3(1.0);
        vec3 phColor = globalAmbient * globalAmbColor + (diffuseIntensity * (normal * 0.5 + 0.5) + specularIntensity * specColor) * light.color;
        //return vec4(phColor, 1.0);
        
        
        //Blinn Phong Reflectance
        //Halfway vector
        vec3 halfVec = normalize(lightNormal + viewVec);
        //Blinn Specular Coefficient
        float bpSpecCoeff = max(0.0, dot(normal, halfVec));
        //Blinn exponent based off the one used in phong
        float blinnExp = 4.0 * hlExponent;
        //Blinn Phong Specular Intensity
        float bpSpecInt = pow(bpSpecCoeff, blinnExp);
        
        //Final Color
        vec3 bpColor = globalAmbient * globalAmbColor + (diffuseIntensity * (normal * 0.5 + 0.5) + bpSpecInt * specColor) * light.color;
        return vec4(bpColor, 1.0);
    }
      
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	//return vec4(mix(warm, cool, rayDirection.y), 1.0);
    return vec4(0.5);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}