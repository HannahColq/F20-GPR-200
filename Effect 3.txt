//Effect 0 This effect courtesy of Professor Buckstein in class
vec4 redGreenGradient(in vec2 fragCoord, in vec2 resolution)
{
    //Calculates and returns values based on pixel location. Sets Red and Green Value based on those calculations.
    vec2 uv = fragCoord / resolution;
    return vec4(uv, 0.0, 1.0);
}

//Effect 1  Referenced https://www.shadertoy.com/view/Xss3Dr for help
vec4 checkerPattern(in vec2 fragCoord, in vec2 resolution)
{   
    //creates vector with the size 2 where the x and y are equal to the floor (nearest int). Determines size/number of squares
    vec2 uv = floor(fragCoord / 50.0);
    //Sets rgb values based on the uv x plus y positions modulus 2. (1.0 for white if it's odd, 0.0 for black if it's even)
    vec3 RGB = vec3(mod(uv.x + uv.y, 2.0));
    //returns rgba values
    return vec4(RGB, 1.0);
}

//Effect 2  Referenced https://www.shadertoy.com/view/4lcGWn
vec4 circle(in vec2 fragCoord, in vec2 resolution, float time)
{
    //Vector for position and of the circle
    vec2 pos =  vec2(fragCoord.xy - 0.5*resolution.xy)/resolution.y;
    //Float value for radius 
    float radius = 0.5 * cos(time);
    
    //Vector for circle color with blue value changing based on time
    vec4 circle = vec4(0.0, 0.75, 0.75*cos(time), 1.0);
   	//Vector for background color with blue value changing based on time
    vec4 background = vec4(0.75, 0.0, 0.75*cos(time), 1.0);
    
    /*If the length of pos is less than radius squared (+ 0.1 so that time doesn't make the radius 0) the pixel 
	is within the circle, thus it prints the circle color. Otherwise the pixel is in the background */
	if(length(pos) < (radius*radius)+0.1)
    {
        return circle;
    }
    else
    {
        return background;
    }
}

//Effect 3
vec4 wave(in vec2 fragCoord, in vec2 resolution, float time)
{
    vec2 uv = fragCoord.xy/resolution;
    
    //color based on time. 0.25 value used to avoid 
    vec3 color = vec3(uv.x/sin(time)+0.25, uv.x-cos(time)+0.25, uv.x*cos(time)+0.25);
    
    //value for edges for smoothstep
    float edge = 0.25;
    //alters color based on the edge and the length of uv y value (- 0.5 to get it the line that's made in the center) compared to the edge
    color += smoothstep(edge, edge + 0.1 , length(uv.y-0.5));
    
    return vec4(color, 1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{    
    //fragColor = redGreenGradient(fragCoord, iResolution.xy);
    //fragColor = checkerPattern(fragCoord, iResolution.xy);
    //fragColor = circle(fragCoord, iResolution.xy, iTime);
    fragColor = wave(fragCoord, iResolution.xy, iTime);
}